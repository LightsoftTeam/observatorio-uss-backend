{
  "openapi": "3.0.0",
  "paths": {
    "/api/swagger": {
      "get": {
        "operationId": "AppController_getSwagger",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "v1"
        ]
      }
    },
    "/api/posts": {
      "post": {
        "operationId": "PostsController_create",
        "summary": "Create a post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The post has been successfully created."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "Posts"
        ]
      },
      "get": {
        "operationId": "PostsController_findAll",
        "summary": "Get all posts",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "query",
            "schema": {
              "nullable": true,
              "enum": [
                "edu-news",
                "edu-bits",
                "edu-reads",
                "edu-tubes",
                "edu-podcast",
                "editorial"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The posts has been successfully retrieved."
          }
        },
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/posts/{id}": {
      "put": {
        "operationId": "PostsController_update",
        "summary": "Update a post",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The post has been successfully updated."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Post not found."
          }
        },
        "tags": [
          "Posts"
        ]
      },
      "delete": {
        "operationId": "PostsController_delete",
        "summary": "Delete a post",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The post has been successfully deleted."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/posts/find/home": {
      "get": {
        "operationId": "PostsController_find",
        "summary": "Get home posts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The posts home has been successfully retrieved."
          }
        },
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/posts/{slug}": {
      "get": {
        "operationId": "PostsController_findOne",
        "summary": "Get a post by slug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The post has been successfully retrieved."
          }
        },
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/posts/{id}/toggle-active-state": {
      "put": {
        "operationId": "PostsController_toggleActiveState",
        "summary": "Toggle state of a post",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The post has been successfully toggled."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/posts/{id}/likes": {
      "post": {
        "operationId": "PostsController_like",
        "summary": "Like a post",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLikesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The post has been successfully liked."
          }
        },
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/posts/seed": {
      "post": {
        "operationId": "PostsController_seed",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/posts/seed/home": {
      "post": {
        "operationId": "PostsController_seedHome",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Posts"
        ]
      }
    },
    "/api/users": {
      "get": {
        "operationId": "UsersController_findAll",
        "summary": "Get users",
        "parameters": [
          {
            "name": "role",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all users"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "UsersController_create",
        "summary": "Create a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create a new user"
          },
          "400": {
            "description": "User already exists"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}": {
      "put": {
        "operationId": "UsersController_update",
        "summary": "Update a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated succesfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/seed": {
      "post": {
        "operationId": "UsersController_seed",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_signIn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/authenticate": {
      "get": {
        "operationId": "AuthController_getAuthenticatedUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieve authenticated user."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/storage/upload": {
      "post": {
        "operationId": "StorageController_upload",
        "summary": "Upload a file",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "fileName": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file has been successfully uploaded."
          }
        },
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/authorities": {
      "post": {
        "operationId": "AuthoritiesController_create",
        "summary": "Create an authority",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthorityDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The authority has been successfully created."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "Authorities"
        ]
      },
      "get": {
        "operationId": "AuthoritiesController_findAll",
        "summary": "Get all authorities",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all authorities."
          }
        },
        "tags": [
          "Authorities"
        ]
      }
    },
    "/api/authorities/{id}": {
      "put": {
        "operationId": "AuthoritiesController_update",
        "summary": "Update an authority",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAuthorityDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The authority has been successfully updated."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Authority not found"
          }
        },
        "tags": [
          "Authorities"
        ]
      },
      "delete": {
        "operationId": "AuthoritiesController_remove",
        "summary": "Delete an authority",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The authority has been successfully deleted."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "Authorities"
        ]
      }
    }
  },
  "info": {
    "title": "Observatorio USS",
    "description": "",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Api",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "CreatePostDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the post",
            "example": "How to create a NestJS application?"
          },
          "description": {
            "type": "string",
            "description": "Description of the post",
            "example": "This is a description of the post",
            "nullable": true
          },
          "category": {
            "type": "string",
            "description": "Category of the post",
            "example": "edu-news"
          },
          "videoUrl": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          },
          "podcastUrl": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          },
          "imageDescription": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "attachments": {
            "description": "",
            "example": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "",
            "example": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "description",
          "category",
          "videoUrl",
          "podcastUrl",
          "content",
          "imageUrl",
          "imageDescription",
          "userId",
          "attachments",
          "tags"
        ]
      },
      "UpdatePostDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateLikesDto": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "The action to perform on the post likes",
            "example": "decrement",
            "default": "increment",
            "enum": [
              "increment",
              "decrement"
            ]
          }
        },
        "required": [
          "action"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "image": {
            "type": "string",
            "description": "The image of the user",
            "example": "https://example.com/image.jpg"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "jhondoe@test.com"
          },
          "password": {
            "type": "string",
            "description": "The password of the user",
            "example": "password"
          },
          "role": {
            "type": "string",
            "description": "The role of the user",
            "example": "author",
            "nullable": true
          }
        },
        "required": [
          "name",
          "image",
          "email",
          "password",
          "role"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "image": {
            "type": "string",
            "description": "The image of the user",
            "example": "https://example.com/image.jpg"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "jhondoe@test.com"
          },
          "password": {
            "type": "string",
            "description": "The password of the user",
            "example": "password"
          },
          "role": {
            "type": "string",
            "description": "The role of the user",
            "example": "author",
            "nullable": true
          }
        }
      },
      "SignInDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "test@test.com"
          },
          "password": {
            "type": "string",
            "description": "The password of the user",
            "example": "password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CreateAuthorityDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the authority",
            "example": "John Doe"
          },
          "description": {
            "type": "string",
            "description": "Description of the authority",
            "example": "This is a description of the authority",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "The image of the authority",
            "example": "https://example.com/image.jpg",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "The position of the authority",
            "example": "CEO",
            "nullable": true
          },
          "hierarchy": {
            "type": "number",
            "description": "The hierarchy of the authority",
            "example": 0,
            "nullable": true
          }
        },
        "required": [
          "name",
          "description",
          "imageUrl",
          "position",
          "hierarchy"
        ]
      },
      "UpdateAuthorityDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the authority",
            "example": "John Doe"
          },
          "description": {
            "type": "string",
            "description": "Description of the authority",
            "example": "This is a description of the authority",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "The image of the authority",
            "example": "https://example.com/image.jpg",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "The position of the authority",
            "example": "CEO",
            "nullable": true
          },
          "hierarchy": {
            "type": "number",
            "description": "The hierarchy of the authority",
            "example": 0,
            "nullable": true
          }
        }
      }
    }
  }
}